buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
	}
}

plugins {
	id 'java'
	id 'groovy'
	id 'java-library'
    id 'signing'
    id 'idea'
    id 'maven-publish'
}


ext {
    isBuildSnapshot = version.endsWith('-SNAPSHOT')
    isReleaseVersion = !isBuildSnapshot
}


group = 'com.bertramlabs.plugins'

repositories {
	mavenCentral()
}

java {
	withJavadocJar()
	withSourcesJar()
}

if (isReleaseVersion) {
   apply plugin: "io.github.gradle-nexus.publish-plugin"
   nexusPublishing {
       repositories {
           sonatype {
               if(project.hasProperty('mavenUser')) {
                   username = mavenUser
                   password = mavenPassword
               }
           }
       }
   }
} else {

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}
		repositories {
			maven {
//				url = project.hasProperty('labsNexusUrl') ? labsNexusUrl : "https://nexus.bertramlabs.com/content/repositories/snapshots"
//				if(project.hasProperty('labsNexusUser')) {
//					credentials {
//						username = labsNexusUser
//						password = labsNexusPassword
//					}
//				}
				url = "http://artifactory.camelotstrategic.lan/ui/native/camelot"

				if(project.hasProperty('repoUsername')) {
					credentials {
						username repoUsername
						password repoPassword
					}
				}
			}

		}
	}
}

subprojects { project ->
	if (project.name != 'asset-pipeline-classpath-test' && project.name != 'asset-pipeline-docs' && project.name != 'asset-pipeline-site') {
	    apply plugin: 'java'
	    apply plugin: 'maven-publish'
/*	    apply plugin: 'signing'
	    afterEvaluate {
	        signing {
	            required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
	            sign publishing.publications.maven
	        }
	    }*/

	    tasks.withType(Sign) {
	        onlyIf { isReleaseVersion }
	    }

	    //do not generate extra load on Nexus with new staging repository if signing fails
	    tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
	        shouldRunAfter(tasks.withType(Sign))
	    }
    
    }
}

dependencies {
	api 'org.codehaus.groovy:groovy:2.4.19'
	api 'org.codehaus.groovy:groovy-templates:2.4.19'
	api 'org.mozilla:rhino:1.7R4'
	testImplementation 'org.spockframework:spock-core:1.3-groovy-2.4'
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}
